// üì¶ D√©pendances principales
const axios = require("axios");
const qrcode = require("qrcode-terminal");
const {
    default: makeWASocket,
    useMultiFileAuthState,
    fetchLatestBaileysVersion
} = require("@whiskeysockets/baileys");

// üîê Cl√© API GPT
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || "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";

// üë§ Propri√©taire
const OWNER_NUMBER = "242067274660@s.whatsapp.net";

// üìá Profils enregistr√©s
const userProfiles = {
    [OWNER_NUMBER]: {
        name: "gon-freecss",
        description: "Cr√©ateur du bot, passionn√© d'informatique et de ses applications."
    }
};

// üí° Mots-cl√©s li√©s √† l'informatique
const motsInformatique = [
    "informatique", "ordinateur", "programme", "code", "algorithme", "intelligence", "IA", "machine",
    "logiciel", "app", "application", "r√©seau", "serveur", "processeur", "disque", "m√©moire", "html",
    "css", "javascript", "python", "java", "linux", "windows", "technologie", "cybers√©curit√©", "web",
    "cloud", "donn√©e", "base de donn√©es", "API", "robot", "gpt", "machine learning", "deep learning",
    "openai", "yolo", "opencv"
];

// üß† Prompt syst√®me humanis√©
const SYSTEM_PROMPT = `
Tu es un assistant personnel expert en informatique. Tu agis comme un ami bienveillant, curieux et p√©dagogue.
Tu accueilles chaleureusement chaque utilisateur et engages la discussion de mani√®re fluide, claire et logique.
Si le message concerne l'informatique, tu r√©ponds avec simplicit√© et humanit√©, sans jargon inutile.
Tu poses parfois des questions pour approfondir ou √©veiller la curiosit√© de l'utilisateur.
Tu t'exprimes toujours en fran√ßais avec respect, structure et chaleur humaine.
`;

// üîÑ Fonction : r√©ponse textuelle depuis GPT
async function getChatGPTResponse(prompt) {
    try {
        const res = await axios.post("https://openrouter.ai/api/v1/chat/completions", {
            model: "gpt-4o",
            messages: [
                { role: "system", content: SYSTEM_PROMPT },
                { role: "user", content: prompt }
            ],
            max_tokens: 1000
        }, {
            headers: {
                "Authorization": `Bearer ${OPENAI_API_KEY}`,
                "Content-Type": "application/json"
            }
        });
        return res.data.choices[0].message.content.trim();
    } catch (err) {
        console.error("‚ùå Erreur API :", err.response?.data || err.message);
        return "D√©sol√©, j‚Äôai eu un souci pour r√©pondre üòî";
    }
}

// üìç V√©rifie si c'est un groupe
function isGroup(jid) {
    return jid.endsWith("@g.us");
}

// üìé V√©rifie si le bot est mentionn√©
function isMentionedMe(msg, myJid) {
    const context = msg.message?.extendedTextMessage?.contextInfo;
    return context?.mentionedJid?.includes(myJid);
}

// üîç D√©tecte la pr√©sence de mots informatiques
function contientMotInformatique(text) {
    return motsInformatique.some(mot => new RegExp(`\\b${mot}\\b`, 'i').test(text));
}

// üöÄ D√©marrage du bot
async function startBot() {
    const { version } = await fetchLatestBaileysVersion();
    const { state, saveCreds } = await useMultiFileAuthState("auth_info");
    const sock = makeWASocket({ version, auth: state });

    sock.ev.on("creds.update", saveCreds);

    sock.ev.on("messages.upsert", async ({ messages }) => {
        const msg = messages[0];
        if (!msg.message || msg.key.fromMe) return;

        const sender = msg.key.remoteJid;
        const myJid = sock.user.id;

        let text = "";
        if (msg.message.conversation) text = msg.message.conversation;
        else if (msg.message.extendedTextMessage?.text) text = msg.message.extendedTextMessage.text;
        else if (msg.message.imageMessage?.caption) text = msg.message.imageMessage.caption;

        console.log("üîç Message re√ßu :", text);

        if (/qui suis[- ]?je\??/i.test(text)) {
            const profile = userProfiles[sender];
            if (profile) {
                await sock.sendMessage(sender, {
                    text: `Enchant√© ${profile.name} üëã : ${profile.description}`
                }, { quoted: msg });
            } else {
                await sock.sendMessage(sender, {
                    text: "Je ne te connais pas encore, mais j‚Äôai h√¢te d‚Äôen apprendre plus sur toi üòä"
                }, { quoted: msg });
            }
            return;
        }

        // üì¢ Commande pour mentionner tout le groupe
        if (/mentionne (tout|tout le monde)/i.test(text) && isGroup(sender)) {
            try {
                const metadata = await sock.groupMetadata(sender);
                const mentions = metadata.participants.map(p => p.id);
                const noms = metadata.participants.map(p => `@${p.id.split("@")[0]}`).join(" ");

                await sock.sendMessage(sender, {
                    text: `üì¢ Voici un petit coucou √† tout le groupe :\n\n${noms}`,
                    mentions
                }, { quoted: msg });
            } catch (e) {
                console.error("Erreur mention groupe:", e);
                await sock.sendMessage(sender, {
                    text: "‚ùå Je n'ai pas r√©ussi √† mentionner tout le monde. Assure-toi que je suis admin."
                }, { quoted: msg });
            }
            return;
        }

        // ‚ÑπÔ∏è Commande d'aide simple
        if (/^(aide|\/help)$/i.test(text)) {
            const aide = `üõ†Ô∏è *Commandes utiles disponibles* :

üëâ *mentionne tout le monde* : Mentionne tous les membres du groupe
üëâ *qui suis-je ?* : Le bot vous d√©crit si vous √™tes enregistr√©
üëâ *sas* ou *gony* : Le bot r√©pond √† une invocation dans le groupe
üëâ *mot informatique* : Le bot d√©tecte et engage une discussion technique
üëâ *aide* ou */help* : Affiche cette aide
`;
            await sock.sendMessage(sender, { text: aide }, { quoted: msg });
            return;
        }

        if (isGroup(sender)) {
            const mention = isMentionedMe(msg, myJid);
            const motInfo = contientMotInformatique(text);
            const invocation = /\b(sas|gony)\b/i.test(text);

            if (mention || motInfo || invocation) {
                console.log("‚ö° D√©clencheur d√©tect√© dans le groupe !");
                const prompt = text.replace(/\b(sas|gony)\b/gi, "").trim() || "Salut √† tous ! üòä";
                const response = await getChatGPTResponse(prompt);
                await sock.sendMessage(sender, { text: response }, { quoted: msg });
            }
        } else {
            const prompt = text.trim().toLowerCase();
            const ignor√©s = ["", "ok", "d'accord", "salut", "bonjour", "merci", "√ßa va", "cc", "yo"];
            if (ignor√©s.includes(prompt)) {
                console.log("üîï Message ignor√© en priv√© :", prompt);
                return;
            }
            const response = await getChatGPTResponse(prompt);
            await sock.sendMessage(sender, { text: response }, { quoted: msg });
        }
    });

    sock.ev.on("connection.update", (update) => {
        const { connection, lastDisconnect, qr } = update;
        if (qr) qrcode.generate(qr, { small: true });
        if (connection === "open") console.log("‚úÖ Bot connect√© √† WhatsApp !");
        if (connection === "close") {
            console.log("‚ùå D√©connect√© !");
            const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== 401;
            if (shouldReconnect) startBot();
        }
    });
}

startBot();